MAP_SIZE = 100
START_ALIVE = 40 -- Chance for a cell to start alive (default 45%)
MIN_ALIVE = 3 -- Minimum number of alive neighbours to stay alive
MIN_BIRTH = 5 -- Minimum number of alive neighbours for dead cell to become alive

CAVE_LAYER = "cave"
ALIVE = 2
DEAD = 0

function init(self)
	tilemap.set_visible("#map", "bounds", false)
	tilemap.set_visible("#map", CAVE_LAYER, true)
	clear_cave()
	centre_map()
	generate_cave()
	draw_cave()
	msg.post(".", "acquire_input_focus")
end

function clear_cave()
	for y=0,(MAP_SIZE-1),1 do
		for x=0,(MAP_SIZE-1),1 do
			tilemap.set_tile("#map", CAVE_LAYER, x, y, 0)
		end
	end
end

function centre_map()
	local width = MAP_SIZE * 16
	local height = MAP_SIZE * 16
	go.set_position(-vmath.vector3(width/2, height/2, 0), ".")
end

function on_input(self, action_id, action)
	if action_id == hash("gen_cave") and action.pressed then
		generate_cave()
		draw_cave()
	end
end

CAVE = {}
STEPS = 10

function generate_cave()
	print("Generating Cave...")
	initialize_cave()
	simulate()
	clean_up_cave()
	print("Generation complete!")
end

function initialize_cave()
	CAVE = {}
	for x=0,(MAP_SIZE-1),1 do
		local column = {}
		for y=0,(MAP_SIZE-1),1 do
			local tile = math.random(1, 100) < START_ALIVE and ALIVE or DEAD
			column[y] = tile
		end
		CAVE[x] = column
	end
end

function numNeighbours(x, y)
	local count = 0
	for i=-1,1,1 do
		for j=-1,1,1 do
			if not (i == 0 and j == 0) then
				local n_x = x+i
				local n_y = y+j
				if n_x < 0 or n_x >= MAP_SIZE or n_y < 0 or n_y >= MAP_SIZE then
					count = count + 1
				elseif CAVE[n_x][n_y] == ALIVE then
					count = count + 1
				end
			end
		end
	end
	return count
end

function simulate()
	for s=1,STEPS,1 do
		local newCave = {}
		for x=0,(MAP_SIZE-1),1 do
			local column = {}
			for y=0,(MAP_SIZE-1),1 do
				local num_neighbours = numNeighbours(x, y)
				if CAVE[x][y] == ALIVE then
					if num_neighbours < MIN_ALIVE then
						column[y] = DEAD
					else
						column[y] = ALIVE
					end
				elseif CAVE[x][y] == DEAD then
					if num_neighbours >= MIN_BIRTH then
						column[y] = ALIVE
					else
						column[y] = DEAD
					end
				end
			end
			newCave[x] = column
		end
		CAVE = newCave
	end
end

function clean_up_cave()
	print("Cleaning up cave...")
	for x=0,(MAP_SIZE-1),1 do
		CAVE[x][0] = ALIVE
		CAVE[x][MAP_SIZE-1] = ALIVE
	end

	for y=0,(MAP_SIZE-1),1 do
		CAVE[0][y] = ALIVE
		CAVE[MAP_SIZE-1][y] = ALIVE
	end
	print("Clean up complete!")
end

function draw_cave()
	print("Drawing cave...")
	for x=0,(MAP_SIZE-1),1 do
		for y=0,(MAP_SIZE-1),1 do
			tilemap.set_tile("#map", CAVE_LAYER, x+2, y+2, CAVE[x][y])
			tilemap.set_tile("#map", CAVE_LAYER, x+2, y+3, CAVE[x][y]+1)
			tilemap.set_tile("#map", CAVE_LAYER, x+3, y+2, CAVE[x][y])
			tilemap.set_tile("#map", CAVE_LAYER, x+3, y+3, CAVE[x][y]+1)
		end
	end
	print("Finished drawing cave!")
end